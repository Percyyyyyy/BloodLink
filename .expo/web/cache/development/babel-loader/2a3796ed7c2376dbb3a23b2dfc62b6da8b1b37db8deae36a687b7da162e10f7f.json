{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenzo\\\\OneDrive\\\\Bureau\\\\ESP\\\\BloodLink\\\\frontEnd\\\\composants\\\\Info\\\\SousInfo\\\\Sante\\\\Autres.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { supabase } from '../../../../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Autres() {\n  var _this = this;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedOption = _useState4[0],\n    setSelectedOption = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedQuestionIndex = _useState6[0],\n    setSelectedQuestionIndex = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    answer = _useState8[0],\n    setAnswer = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    buttonColors = _useState10[0],\n    setButtonColors = _useState10[1];\n  useEffect(function () {\n    fetchQuestions();\n  }, []);\n  function fetchQuestions() {\n    return _fetchQuestions.apply(this, arguments);\n  }\n  function _fetchQuestions() {\n    _fetchQuestions = _asyncToGenerator(function* () {\n      try {\n        var _yield$supabase$from$ = yield supabase.from('questionnaire_dons_questions').select(`\n            libelleQuestion, \n            questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion),\n            sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)`).eq('idSousCategorieQuestion', '5'),\n          data = _yield$supabase$from$.data,\n          error = _yield$supabase$from$.error;\n        if (error) {\n          console.error('erreur ', error);\n          return;\n        }\n        getResponsesForUser(getIdQuestionnaireUserConnecte(getUserConnecte()));\n        var initialButtonColors = new Array(data.length).fill({\n          oui: 'white',\n          non: 'white',\n          idk: 'white'\n        });\n        setButtonColors(initialButtonColors);\n        setQuestions(data);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return _fetchQuestions.apply(this, arguments);\n  }\n  function getResponsesForUser(_x) {\n    return _getResponsesForUser.apply(this, arguments);\n  }\n  function _getResponsesForUser() {\n    _getResponsesForUser = _asyncToGenerator(function* (userId) {\n      try {\n        var _yield$supabase$rpc = yield supabase.rpc('get_responses_for_user', {\n            id_user: userId\n          }),\n          data = _yield$supabase$rpc.data,\n          error = _yield$supabase$rpc.error;\n        if (error) {\n          console.error('Erreur lors de l\\'appel de la fonction get_responses_for_user:', error.message);\n          return null;\n        }\n        console.log(data);\n        return data;\n      } catch (error) {\n        console.error('Erreur lors de l\\'appel de la fonction get_responses_for_user:', error.message);\n        return null;\n      }\n    });\n    return _getResponsesForUser.apply(this, arguments);\n  }\n  function getUserConnecte() {\n    return _getUserConnecte.apply(this, arguments);\n  }\n  function _getUserConnecte() {\n    _getUserConnecte = _asyncToGenerator(function* () {\n      var userActif = yield supabase.auth.getUser();\n      var userId = userActif.data.user.id;\n      return userId;\n    });\n    return _getUserConnecte.apply(this, arguments);\n  }\n  function getIdQuestionnaireUserConnecte(_x2) {\n    return _getIdQuestionnaireUserConnecte.apply(this, arguments);\n  }\n  function _getIdQuestionnaireUserConnecte() {\n    _getIdQuestionnaireUserConnecte = _asyncToGenerator(function* (idUser) {\n      try {\n        var _yield$supabase$rpc2 = yield supabase.rpc('get_id_questionnaire_user_connecte', {\n            iduser: idUser\n          }),\n          data = _yield$supabase$rpc2.data,\n          error = _yield$supabase$rpc2.error;\n        console.log(data);\n        if (error) {\n          throw new Error('Erreur lors de l\\'appel de la fonction PL/pgSQL: ' + error.message);\n        }\n        if (data.length === 0) {\n          throw new Error('ID du questionnaire non trouvé pour l\\'utilisateur connecté');\n        }\n        return data;\n      } catch (error) {\n        console.error('Erreur:', error.message);\n        return null;\n      }\n    });\n    return _getIdQuestionnaireUserConnecte.apply(this, arguments);\n  }\n  function insertOrUpdateQuestionnaire(_x3, _x4, _x5, _x6, _x7) {\n    return _insertOrUpdateQuestionnaire.apply(this, arguments);\n  }\n  function _insertOrUpdateQuestionnaire() {\n    _insertOrUpdateQuestionnaire = _asyncToGenerator(function* (idQuestionnaire, idQuestion, reponseQuestion, idDetailQuestion, reponseDetailQuestion) {\n      try {\n        var _yield$supabase$rpc3 = yield supabase.rpc('insert_or_update_liaison_questionnaire', {\n            idquestionnaire: idQuestionnaire,\n            idquestion: idQuestion,\n            reponsequestion: reponseQuestion,\n            iddetailquestion: idDetailQuestion,\n            reponsedetailquestion: reponseDetailQuestion\n          }),\n          data = _yield$supabase$rpc3.data,\n          error = _yield$supabase$rpc3.error;\n        if (error) {\n          throw new Error('Erreur lors de l\\'opération: ' + error.message);\n        }\n        Alert.alert('Opération réussie');\n      } catch (error) {\n        console.error('Erreur lors de l\\'opération:', error.message);\n        Alert.alert('Erreur lors de l\\'opération');\n      }\n    });\n    return _insertOrUpdateQuestionnaire.apply(this, arguments);\n  }\n  function handleOptionSelect(_x8, _x9) {\n    return _handleOptionSelect.apply(this, arguments);\n  }\n  function _handleOptionSelect() {\n    _handleOptionSelect = _asyncToGenerator(function* (option, index) {\n      try {\n        var userId = yield getUserConnecte();\n        var idQuestionnaire = yield getIdQuestionnaireUserConnecte(userId);\n        if (idQuestionnaire) {\n          insertOrUpdateQuestionnaire(idQuestionnaire, index, option, null, answer);\n        } else {\n          console.error('ID du questionnaire non trouvé.');\n        }\n        setSelectedOption(option);\n        setSelectedQuestionIndex(index);\n        setButtonColors(function (prevColors) {\n          var updatedColors = _toConsumableArray(prevColors);\n          var selectedQuestionColors = {\n            oui: 'white',\n            non: 'white',\n            idk: 'white'\n          };\n          if (option === 'Oui') {\n            selectedQuestionColors.oui = '#0BADD5';\n          } else if (option === 'Non') {\n            selectedQuestionColors.non = '#0BADD5';\n          } else if (option === 'Je ne sais pas') {\n            selectedQuestionColors.idk = '#0BADD5';\n          }\n          updatedColors[index] = selectedQuestionColors;\n          return updatedColors;\n        });\n        console.log(index);\n        console.log(option);\n      } catch (error) {\n        console.error('Erreur lors de la manipulation des données:', error);\n        Alert.alert('Erreur lors de la manipulation des données');\n      }\n    });\n    return _handleOptionSelect.apply(this, arguments);\n  }\n  return _jsxDEV(ScrollView, {\n    children: questions.map(function (question, index) {\n      return _jsxDEV(View, {\n        children: [_jsxDEV(Text, {\n          children: question.libelleQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, _this), selectedQuestionIndex === index && selectedOption === 'Oui' && question.questionnaire_dons_details_questions.map(function (detail, detailIndex) {\n          return _jsxDEV(View, {\n            children: [_jsxDEV(Text, {\n              children: detail.libelleDetailQuestion\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }, _this), _jsxDEV(TextInput, {\n              placeholder: \"R\\xE9ponse\",\n              onChangeText: function onChangeText(text) {\n                return setAnswer(text);\n              },\n              value: answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, _this)]\n          }, detailIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, _this);\n        }), _jsxDEV(View, {\n          style: styles.buttonContainer,\n          children: [_jsxDEV(TouchableOpacity, {\n            style: [styles.buttonOui, {\n              backgroundColor: buttonColors[index].oui\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Oui', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonText,\n              children: \"Oui\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, _this), _jsxDEV(TouchableOpacity, {\n            style: [styles.buttonIDK, {\n              backgroundColor: buttonColors[index].idk\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Je ne sais pas', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonTextIDK,\n              children: \"Je ne sais pas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, _this), _jsxDEV(TouchableOpacity, {\n            style: [styles.buttonNon, {\n              backgroundColor: buttonColors[index].non\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Non', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonText,\n              children: \"Non\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, _this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n}\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 10\n  },\n  buttonIDK: {\n    padding: 10,\n    borderRadius: 5,\n    width: '40%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonOui: {\n    padding: 10,\n    borderRadius: 5,\n    width: '25%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonNon: {\n    padding: 10,\n    borderRadius: 5,\n    width: '25%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonText: {\n    color: 'black',\n    textAlign: 'center'\n  },\n  buttonTextIDK: {\n    color: 'black',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","ScrollView","StyleSheet","TouchableOpacity","Alert","supabase","jsxDEV","_jsxDEV","Autres","_this","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","selectedOption","setSelectedOption","_useState5","_useState6","selectedQuestionIndex","setSelectedQuestionIndex","_useState7","_useState8","answer","setAnswer","_useState9","_useState10","buttonColors","setButtonColors","fetchQuestions","_fetchQuestions","apply","arguments","_asyncToGenerator","_yield$supabase$from$","from","select","eq","data","error","console","getResponsesForUser","getIdQuestionnaireUserConnecte","getUserConnecte","initialButtonColors","Array","length","fill","oui","non","idk","_x","_getResponsesForUser","userId","_yield$supabase$rpc","rpc","id_user","message","log","_getUserConnecte","userActif","auth","getUser","user","id","_x2","_getIdQuestionnaireUserConnecte","idUser","_yield$supabase$rpc2","iduser","Error","insertOrUpdateQuestionnaire","_x3","_x4","_x5","_x6","_x7","_insertOrUpdateQuestionnaire","idQuestionnaire","idQuestion","reponseQuestion","idDetailQuestion","reponseDetailQuestion","_yield$supabase$rpc3","idquestionnaire","idquestion","reponsequestion","iddetailquestion","reponsedetailquestion","alert","handleOptionSelect","_x8","_x9","_handleOptionSelect","option","index","prevColors","updatedColors","_toConsumableArray","selectedQuestionColors","children","map","question","libelleQuestion","fileName","_jsxFileName","lineNumber","columnNumber","questionnaire_dons_details_questions","detail","detailIndex","libelleDetailQuestion","placeholder","onChangeText","text","value","style","styles","buttonContainer","buttonOui","backgroundColor","onPress","buttonText","buttonIDK","buttonTextIDK","buttonNon","create","flexDirection","justifyContent","marginTop","padding","borderRadius","width","borderColor","borderWidth","color","textAlign"],"sources":["C:/Users/kenzo/OneDrive/Bureau/ESP/BloodLink/frontEnd/composants/Info/SousInfo/Sante/Autres.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Button, TextInput, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\r\nimport { supabase } from '../../../../lib/supabase';\r\n\r\n\r\n\r\nexport default function Autres() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [selectedQuestionIndex, setSelectedQuestionIndex] = useState(null);\r\n    const [answer, setAnswer] = useState('');\r\n    const [buttonColors, setButtonColors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    async function fetchQuestions() {\r\n        try {\r\n            const { data, error } = await supabase.from('questionnaire_dons_questions')\r\n                .select(`\r\n            libelleQuestion, \r\n            questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion),\r\n            sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)`)\r\n                .eq('idSousCategorieQuestion', '5');\r\n            if (error) {\r\n                console.error('erreur ', error);\r\n                return;\r\n            }\r\n            getResponsesForUser(getIdQuestionnaireUserConnecte(getUserConnecte()))\r\n            const initialButtonColors = new Array(data.length).fill({ oui: 'white', non: 'white', idk: 'white' });\r\n            setButtonColors(initialButtonColors);\r\n            setQuestions(data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    async function getResponsesForUser(userId) {\r\n        try {\r\n            const { data, error } = await supabase.rpc('get_responses_for_user', { id_user: userId });\r\n    \r\n            if (error) {\r\n                console.error('Erreur lors de l\\'appel de la fonction get_responses_for_user:', error.message);\r\n                return null;\r\n            }\r\n            console.log(data);\r\n            \r\n            return data;\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'appel de la fonction get_responses_for_user:', error.message);\r\n            return null;\r\n        }\r\n    }\r\n    async function getUserConnecte() {\r\n        const userActif = await supabase.auth.getUser();\r\n        const userId = userActif.data.user.id;        \r\n        return userId;\r\n    }\r\n   \r\n    // async function fetchQuestions() {\r\n    //     try {\r\n    //         const userId = getUserConnecte();\r\n    //         if (!userId) {\r\n    //             console.error('Utilisateur non identifié.');\r\n    //             return;\r\n    //         }\r\n    \r\n    //         const { data: userResponses, error: responseError } = await supabase\r\n    //             .from('liaison_questionnaire')\r\n    //             .select('idQuestion, reponseQuestion')\r\n    //             .eq('idQuestionnaire', userId); // Récupérer les réponses de l'utilisateur\r\n                \r\n    //         console.log(\"user responses : \"+userResponses);\r\n            \r\n    //         if (responseError) {\r\n    //             console.error('Erreur lors de la récupération des réponses:', responseError.message);\r\n    //             return;\r\n    //         }\r\n    \r\n    //         const { data: questionsData, error: questionsError } = await supabase\r\n    //             .from('questionnaire_dons_questions')\r\n    //             .select('idQuestion, libelleQuestion, questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion), sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)')\r\n    //             .eq('idSousCategorieQuestion', '5');\r\n    \r\n    //         if (questionsError) {\r\n    //             console.error('Erreur lors de la récupération des questions:', questionsError.message);\r\n    //             return;\r\n    //         }\r\n    \r\n    //         const initialButtonColors = questionsData.map(question => {\r\n    //             const userResponse = userResponses.find(response => response.idQuestion === question.idQuestion);\r\n    //             if (userResponse) {\r\n    //                 // Vérifier si la réponse de l'utilisateur à la question est \"Oui\"\r\n    //                 if (userResponse.reponseQuestion === 'Oui') {\r\n    //                     // Si la réponse est \"Oui\", définir la couleur du bouton \"Oui\" sur bleu\r\n    //                     return { oui: 'blue', non: 'white', idk: 'white' };\r\n    //                 } else if (userResponse.reponseQuestion === 'Non') {\r\n    //                     // Si la réponse est \"Non\", définir la couleur du bouton \"Non\" sur bleu\r\n    //                     return { oui: 'white', non: 'blue', idk: 'white' };\r\n    //                 } else if (userResponse.reponseQuestion === 'Je ne sais pas') {\r\n    //                     // Si la réponse est \"je ne sais pas\", définir la couleur du bouton \"je ne sais pas\" sur bleu\r\n    //                     return { oui: 'white', non: 'white', idk: 'blue' };\r\n    //                 }\r\n    //             } else {\r\n    //                 // Si l'utilisateur n'a pas encore répondu à cette question, définir la couleur par défaut\r\n    //                 return { oui: 'white', non: 'white', idk: 'white' };\r\n    //             }\r\n    //         });\r\n    \r\n    //         setButtonColors(initialButtonColors);\r\n    //         setQuestions(questionsData);\r\n    //     } catch (error) {\r\n    //         console.error('Erreur lors de la récupération des questions et réponses:', error.message);\r\n    //     }\r\n    // }\r\n\r\n    async function getIdQuestionnaireUserConnecte(idUser) {\r\n        try {\r\n            const { data, error } = await supabase.rpc('get_id_questionnaire_user_connecte', { iduser: idUser });\r\n            console.log(data);\r\n\r\n            if (error) {\r\n                throw new Error('Erreur lors de l\\'appel de la fonction PL/pgSQL: ' + error.message);\r\n            }\r\n\r\n            if (data.length === 0) {\r\n                throw new Error('ID du questionnaire non trouvé pour l\\'utilisateur connecté');\r\n            }\r\n            \r\n            return data;\r\n        } catch (error) {\r\n            console.error('Erreur:', error.message);\r\n            return null;\r\n        }\r\n    }\r\n    async function insertOrUpdateQuestionnaire(idQuestionnaire, idQuestion, reponseQuestion, idDetailQuestion, reponseDetailQuestion) {\r\n        try {\r\n            const { data, error } = await supabase.rpc('insert_or_update_liaison_questionnaire', {\r\n                idquestionnaire: idQuestionnaire,\r\n                idquestion: idQuestion,\r\n                reponsequestion: reponseQuestion,\r\n                iddetailquestion: idDetailQuestion,\r\n                reponsedetailquestion: reponseDetailQuestion\r\n            });\r\n    \r\n            if (error) {\r\n                throw new Error('Erreur lors de l\\'opération: ' + error.message);\r\n            }\r\n    \r\n            Alert.alert('Opération réussie');\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'opération:', error.message);\r\n            Alert.alert('Erreur lors de l\\'opération');\r\n        }\r\n    }\r\n    \r\n    async function handleOptionSelect(option, index,) {\r\n        try {\r\n            const userId = await getUserConnecte();\r\n            const idQuestionnaire = await getIdQuestionnaireUserConnecte(userId);\r\n    \r\n            if (idQuestionnaire) {\r\n                insertOrUpdateQuestionnaire(idQuestionnaire, index, option, null, answer);\r\n            } else {\r\n                console.error('ID du questionnaire non trouvé.');\r\n            }\r\n    \r\n            setSelectedOption(option);\r\n            setSelectedQuestionIndex(index);\r\n            setButtonColors(prevColors => {\r\n                const updatedColors = [...prevColors];\r\n                const selectedQuestionColors = { oui: 'white', non: 'white', idk: 'white' };\r\n                if (option === 'Oui') {\r\n                    selectedQuestionColors.oui = '#0BADD5';\r\n                } else if (option === 'Non') {\r\n                    selectedQuestionColors.non = '#0BADD5';\r\n                } else if (option === 'Je ne sais pas') {\r\n                    selectedQuestionColors.idk = '#0BADD5';\r\n                }\r\n    \r\n                updatedColors[index] = selectedQuestionColors;\r\n                return updatedColors;\r\n            });\r\n            \r\n            console.log(index);\r\n            console.log(option);\r\n            \r\n            \r\n        } catch (error) {\r\n            console.error('Erreur lors de la manipulation des données:', error);\r\n            Alert.alert('Erreur lors de la manipulation des données');\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <ScrollView>\r\n            {questions.map((question, index) => (\r\n                <View key={index}>\r\n                    <Text>{question.libelleQuestion}</Text>\r\n                    {selectedQuestionIndex === index && selectedOption === 'Oui' && question.questionnaire_dons_details_questions.map((detail, detailIndex) => (\r\n                        <View key={detailIndex}>\r\n                            <Text>{detail.libelleDetailQuestion}</Text>\r\n                            <TextInput\r\n                                placeholder=\"Réponse\"\r\n                                onChangeText={(text) => setAnswer(text)}\r\n                                value={answer}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                    <View style={styles.buttonContainer}>\r\n                        <TouchableOpacity style={[styles.buttonOui, { backgroundColor: buttonColors[index].oui }]} onPress={() => handleOptionSelect('Oui', index)}>\r\n                            <Text style={styles.buttonText}>Oui</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={[styles.buttonIDK, { backgroundColor: buttonColors[index].idk }]} onPress={() => handleOptionSelect('Je ne sais pas', index)}>\r\n                            <Text style={styles.buttonTextIDK}>Je ne sais pas</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={[styles.buttonNon, { backgroundColor: buttonColors[index].non }]} onPress={() => handleOptionSelect('Non', index)}>\r\n                            <Text style={styles.buttonText}>Non</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            ))}\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        marginTop: 10,\r\n    },\r\n    buttonIDK: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '40%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonOui: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '25%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonNon: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '25%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonText: {\r\n        color: 'black',\r\n        textAlign: 'center',\r\n\r\n    },\r\n    buttonTextIDK: {\r\n        color: 'black',\r\n        textAlign: 'center',\r\n\r\n    },\r\n});"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAEnD,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIpD,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAA,IAAAC,KAAA;EAC7B,IAAAC,SAAA,GAAkCd,QAAQ,CAAC,EAAE,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAA4CnB,QAAQ,CAAC,IAAI,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAA0DvB,QAAQ,CAAC,IAAI,CAAC;IAAAwB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAjEE,qBAAqB,GAAAD,UAAA;IAAEE,wBAAwB,GAAAF,UAAA;EACtD,IAAAG,UAAA,GAA4B3B,QAAQ,CAAC,EAAE,CAAC;IAAA4B,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAAwC/B,QAAQ,CAAC,EAAE,CAAC;IAAAgC,WAAA,GAAAhB,cAAA,CAAAe,UAAA;IAA7CE,YAAY,GAAAD,WAAA;IAAEE,eAAe,GAAAF,WAAA;EAEpC/B,SAAS,CAAC,YAAM;IACZkC,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAAC,SAEQA,cAAcA,CAAA;IAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAF,gBAAA;IAAAA,eAAA,GAAAG,iBAAA,CAA7B,aAAgC;MAC5B,IAAI;QACA,IAAAC,qBAAA,SAA8B/B,QAAQ,CAACgC,IAAI,CAAC,8BAA8B,CAAC,CACtEC,MAAM,CAAE;AACzB;AACA;AACA,gHAAgH,CAAC,CAChGC,EAAE,CAAC,yBAAyB,EAAE,GAAG,CAAC;UAL/BC,IAAI,GAAAJ,qBAAA,CAAJI,IAAI;UAAEC,KAAK,GAAAL,qBAAA,CAALK,KAAK;QAMnB,IAAIA,KAAK,EAAE;UACPC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;UAC/B;QACJ;QACAE,mBAAmB,CAACC,8BAA8B,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtE,IAAMC,mBAAmB,GAAG,IAAIC,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC;UAAEC,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE,OAAO;UAAEC,GAAG,EAAE;QAAQ,CAAC,CAAC;QACrGtB,eAAe,CAACgB,mBAAmB,CAAC;QACpChC,YAAY,CAAC0B,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IAAA,OAAAT,eAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAA,SACcS,mBAAmBA,CAAAU,EAAA;IAAA,OAAAC,oBAAA,CAAArB,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAoB,qBAAA;IAAAA,oBAAA,GAAAnB,iBAAA,CAAlC,WAAmCoB,MAAM,EAAE;MACvC,IAAI;QACA,IAAAC,mBAAA,SAA8BnD,QAAQ,CAACoD,GAAG,CAAC,wBAAwB,EAAE;YAAEC,OAAO,EAAEH;UAAO,CAAC,CAAC;UAAjFf,IAAI,GAAAgB,mBAAA,CAAJhB,IAAI;UAAEC,KAAK,GAAAe,mBAAA,CAALf,KAAK;QAEnB,IAAIA,KAAK,EAAE;UACPC,OAAO,CAACD,KAAK,CAAC,gEAAgE,EAAEA,KAAK,CAACkB,OAAO,CAAC;UAC9F,OAAO,IAAI;QACf;QACAjB,OAAO,CAACkB,GAAG,CAACpB,IAAI,CAAC;QAEjB,OAAOA,IAAI;MACf,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gEAAgE,EAAEA,KAAK,CAACkB,OAAO,CAAC;QAC9F,OAAO,IAAI;MACf;IACJ,CAAC;IAAA,OAAAL,oBAAA,CAAArB,KAAA,OAAAC,SAAA;EAAA;EAAA,SACcW,eAAeA,CAAA;IAAA,OAAAgB,gBAAA,CAAA5B,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAA2B,iBAAA;IAAAA,gBAAA,GAAA1B,iBAAA,CAA9B,aAAiC;MAC7B,IAAM2B,SAAS,SAASzD,QAAQ,CAAC0D,IAAI,CAACC,OAAO,CAAC,CAAC;MAC/C,IAAMT,MAAM,GAAGO,SAAS,CAACtB,IAAI,CAACyB,IAAI,CAACC,EAAE;MACrC,OAAOX,MAAM;IACjB,CAAC;IAAA,OAAAM,gBAAA,CAAA5B,KAAA,OAAAC,SAAA;EAAA;EAAA,SA2DcU,8BAA8BA,CAAAuB,GAAA;IAAA,OAAAC,+BAAA,CAAAnC,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAAkC,gCAAA;IAAAA,+BAAA,GAAAjC,iBAAA,CAA7C,WAA8CkC,MAAM,EAAE;MAClD,IAAI;QACA,IAAAC,oBAAA,SAA8BjE,QAAQ,CAACoD,GAAG,CAAC,oCAAoC,EAAE;YAAEc,MAAM,EAAEF;UAAO,CAAC,CAAC;UAA5F7B,IAAI,GAAA8B,oBAAA,CAAJ9B,IAAI;UAAEC,KAAK,GAAA6B,oBAAA,CAAL7B,KAAK;QACnBC,OAAO,CAACkB,GAAG,CAACpB,IAAI,CAAC;QAEjB,IAAIC,KAAK,EAAE;UACP,MAAM,IAAI+B,KAAK,CAAC,mDAAmD,GAAG/B,KAAK,CAACkB,OAAO,CAAC;QACxF;QAEA,IAAInB,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;UACnB,MAAM,IAAIwB,KAAK,CAAC,6DAA6D,CAAC;QAClF;QAEA,OAAOhC,IAAI;MACf,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACkB,OAAO,CAAC;QACvC,OAAO,IAAI;MACf;IACJ,CAAC;IAAA,OAAAS,+BAAA,CAAAnC,KAAA,OAAAC,SAAA;EAAA;EAAA,SACcuC,2BAA2BA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAC,4BAAA,CAAA9C,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAA6C,6BAAA;IAAAA,4BAAA,GAAA5C,iBAAA,CAA1C,WAA2C6C,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAE;MAC9H,IAAI;QACA,IAAAC,oBAAA,SAA8BhF,QAAQ,CAACoD,GAAG,CAAC,wCAAwC,EAAE;YACjF6B,eAAe,EAAEN,eAAe;YAChCO,UAAU,EAAEN,UAAU;YACtBO,eAAe,EAAEN,eAAe;YAChCO,gBAAgB,EAAEN,gBAAgB;YAClCO,qBAAqB,EAAEN;UAC3B,CAAC,CAAC;UANM5C,IAAI,GAAA6C,oBAAA,CAAJ7C,IAAI;UAAEC,KAAK,GAAA4C,oBAAA,CAAL5C,KAAK;QAQnB,IAAIA,KAAK,EAAE;UACP,MAAM,IAAI+B,KAAK,CAAC,+BAA+B,GAAG/B,KAAK,CAACkB,OAAO,CAAC;QACpE;QAEAvD,KAAK,CAACuF,KAAK,CAAC,mBAAmB,CAAC;MACpC,CAAC,CAAC,OAAOlD,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACkB,OAAO,CAAC;QAC5DvD,KAAK,CAACuF,KAAK,CAAC,6BAA6B,CAAC;MAC9C;IACJ,CAAC;IAAA,OAAAZ,4BAAA,CAAA9C,KAAA,OAAAC,SAAA;EAAA;EAAA,SAEc0D,kBAAkBA,CAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAC,mBAAA,CAAA9D,KAAA,OAAAC,SAAA;EAAA;EAAA,SAAA6D,oBAAA;IAAAA,mBAAA,GAAA5D,iBAAA,CAAjC,WAAkC6D,MAAM,EAAEC,KAAK,EAAG;MAC9C,IAAI;QACA,IAAM1C,MAAM,SAASV,eAAe,CAAC,CAAC;QACtC,IAAMmC,eAAe,SAASpC,8BAA8B,CAACW,MAAM,CAAC;QAEpE,IAAIyB,eAAe,EAAE;UACjBP,2BAA2B,CAACO,eAAe,EAAEiB,KAAK,EAAED,MAAM,EAAE,IAAI,EAAEvE,MAAM,CAAC;QAC7E,CAAC,MAAM;UACHiB,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAC;QACpD;QAEAvB,iBAAiB,CAAC8E,MAAM,CAAC;QACzB1E,wBAAwB,CAAC2E,KAAK,CAAC;QAC/BnE,eAAe,CAAC,UAAAoE,UAAU,EAAI;UAC1B,IAAMC,aAAa,GAAAC,kBAAA,CAAOF,UAAU,CAAC;UACrC,IAAMG,sBAAsB,GAAG;YAAEnD,GAAG,EAAE,OAAO;YAAEC,GAAG,EAAE,OAAO;YAAEC,GAAG,EAAE;UAAQ,CAAC;UAC3E,IAAI4C,MAAM,KAAK,KAAK,EAAE;YAClBK,sBAAsB,CAACnD,GAAG,GAAG,SAAS;UAC1C,CAAC,MAAM,IAAI8C,MAAM,KAAK,KAAK,EAAE;YACzBK,sBAAsB,CAAClD,GAAG,GAAG,SAAS;UAC1C,CAAC,MAAM,IAAI6C,MAAM,KAAK,gBAAgB,EAAE;YACpCK,sBAAsB,CAACjD,GAAG,GAAG,SAAS;UAC1C;UAEA+C,aAAa,CAACF,KAAK,CAAC,GAAGI,sBAAsB;UAC7C,OAAOF,aAAa;QACxB,CAAC,CAAC;QAEFzD,OAAO,CAACkB,GAAG,CAACqC,KAAK,CAAC;QAClBvD,OAAO,CAACkB,GAAG,CAACoC,MAAM,CAAC;MAGvB,CAAC,CAAC,OAAOvD,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;QACnErC,KAAK,CAACuF,KAAK,CAAC,4CAA4C,CAAC;MAC7D;IACJ,CAAC;IAAA,OAAAI,mBAAA,CAAA9D,KAAA,OAAAC,SAAA;EAAA;EAGD,OACI3B,OAAA,CAACN,UAAU;IAAAqG,QAAA,EACNzF,SAAS,CAAC0F,GAAG,CAAC,UAACC,QAAQ,EAAEP,KAAK;MAAA,OAC3B1F,OAAA,CAACT,IAAI;QAAAwG,QAAA,GACD/F,OAAA,CAACR,IAAI;UAAAuG,QAAA,EAAEE,QAAQ,CAACC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAApG,KAAO,CAAC,EACtCY,qBAAqB,KAAK4E,KAAK,IAAIhF,cAAc,KAAK,KAAK,IAAIuF,QAAQ,CAACM,oCAAoC,CAACP,GAAG,CAAC,UAACQ,MAAM,EAAEC,WAAW;UAAA,OAClIzG,OAAA,CAACT,IAAI;YAAAwG,QAAA,GACD/F,OAAA,CAACR,IAAI;cAAAuG,QAAA,EAAES,MAAM,CAACE;YAAqB;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAApG,KAAO,CAAC,EAC3CF,OAAA,CAACP,SAAS;cACNkH,WAAW,EAAC,YAAS;cACrBC,YAAY,EAAE,SAAAA,aAACC,IAAI;gBAAA,OAAK1F,SAAS,CAAC0F,IAAI,CAAC;cAAA,CAAC;cACxCC,KAAK,EAAE5F;YAAO;cAAAiF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAApG,KACjB,CAAC;UAAA,GANKuG,WAAW;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAApG,KAOhB,CAAC;QAAA,CACV,CAAC,EACFF,OAAA,CAACT,IAAI;UAACwH,KAAK,EAAEC,MAAM,CAACC,eAAgB;UAAAlB,QAAA,GAChC/F,OAAA,CAACJ,gBAAgB;YAACmH,KAAK,EAAE,CAACC,MAAM,CAACE,SAAS,EAAE;cAAEC,eAAe,EAAE7F,YAAY,CAACoE,KAAK,CAAC,CAAC/C;YAAI,CAAC,CAAE;YAACyE,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAM/B,kBAAkB,CAAC,KAAK,EAAEK,KAAK,CAAC;YAAA,CAAC;YAAAK,QAAA,EACvI/F,OAAA,CAACR,IAAI;cAACuH,KAAK,EAAEC,MAAM,CAACK,UAAW;cAAAtB,QAAA,EAAC;YAAG;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAApG,KAAM;UAAC;YAAAiG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAApG,KAC5B,CAAC,EACnBF,OAAA,CAACJ,gBAAgB;YAACmH,KAAK,EAAE,CAACC,MAAM,CAACM,SAAS,EAAE;cAAEH,eAAe,EAAE7F,YAAY,CAACoE,KAAK,CAAC,CAAC7C;YAAI,CAAC,CAAE;YAACuE,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAM/B,kBAAkB,CAAC,gBAAgB,EAAEK,KAAK,CAAC;YAAA,CAAC;YAAAK,QAAA,EAClJ/F,OAAA,CAACR,IAAI;cAACuH,KAAK,EAAEC,MAAM,CAACO,aAAc;cAAAxB,QAAA,EAAC;YAAc;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAApG,KAAM;UAAC;YAAAiG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAApG,KAC1C,CAAC,EACnBF,OAAA,CAACJ,gBAAgB;YAACmH,KAAK,EAAE,CAACC,MAAM,CAACQ,SAAS,EAAE;cAAEL,eAAe,EAAE7F,YAAY,CAACoE,KAAK,CAAC,CAAC9C;YAAI,CAAC,CAAE;YAACwE,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAM/B,kBAAkB,CAAC,KAAK,EAAEK,KAAK,CAAC;YAAA,CAAC;YAAAK,QAAA,EACvI/F,OAAA,CAACR,IAAI;cAACuH,KAAK,EAAEC,MAAM,CAACK,UAAW;cAAAtB,QAAA,EAAC;YAAG;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAApG,KAAM;UAAC;YAAAiG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAApG,KAC5B,CAAC;QAAA;UAAAiG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAApG,KACjB,CAAC;MAAA,GAtBAwF,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAApG,KAuBV,CAAC;IAAA,CACV;EAAC;IAAAiG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAErB;AAEA,IAAMU,MAAM,GAAGrH,UAAU,CAAC8H,MAAM,CAAC;EAC7BR,eAAe,EAAE;IACbS,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,cAAc;IAC9BC,SAAS,EAAE;EACf,CAAC;EACDN,SAAS,EAAE;IACPO,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,CAAC;IACfC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE,OAAO;IACpBC,WAAW,EAAE;EACjB,CAAC;EACDf,SAAS,EAAE;IACPW,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,CAAC;IACfC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE,OAAO;IACpBC,WAAW,EAAE;EACjB,CAAC;EACDT,SAAS,EAAE;IACPK,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,CAAC;IACfC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE,OAAO;IACpBC,WAAW,EAAE;EACjB,CAAC;EACDZ,UAAU,EAAE;IACRa,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE;EAEf,CAAC;EACDZ,aAAa,EAAE;IACXW,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE;EAEf;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}