{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenzo\\\\OneDrive\\\\Bureau\\\\ESP\\\\BloodLink\\\\frontEnd\\\\composants\\\\Info\\\\SousInfo\\\\Sante\\\\Autres.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { supabase } from '../../../../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Autres() {\n  var _this = this;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedOption = _useState4[0],\n    setSelectedOption = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedQuestionIndex = _useState6[0],\n    setSelectedQuestionIndex = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    answer = _useState8[0],\n    setAnswer = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    buttonColors = _useState10[0],\n    setButtonColors = _useState10[1];\n  useEffect(function () {\n    fetchQuestions();\n  }, []);\n  function fetchQuestions() {\n    return _fetchQuestions.apply(this, arguments);\n  }\n  function _fetchQuestions() {\n    _fetchQuestions = _asyncToGenerator(function* () {\n      try {\n        var userId = getUserConnecte();\n        if (!userId) {\n          console.error('Utilisateur non identifié.');\n          return;\n        }\n        var _yield$supabase$from$ = yield supabase.from('liaison_questionnaire').select('idQuestion, reponseQuestion').eq('idQuestionnaire', userId),\n          userResponses = _yield$supabase$from$.data,\n          responseError = _yield$supabase$from$.error;\n        console.log(userResponses);\n        if (responseError) {\n          console.error('Erreur lors de la récupération des réponses:', responseError.message);\n          return;\n        }\n        var _yield$supabase$from$2 = yield supabase.from('questionnaire_dons_questions').select('idQuestion, libelleQuestion, questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion), sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)').eq('idSousCategorieQuestion', '5'),\n          questionsData = _yield$supabase$from$2.data,\n          questionsError = _yield$supabase$from$2.error;\n        if (questionsError) {\n          console.error('Erreur lors de la récupération des questions:', questionsError.message);\n          return;\n        }\n        var initialButtonColors = questionsData.map(function (question) {\n          var userResponse = userResponses.find(function (response) {\n            return response.idQuestion === question.idQuestion;\n          });\n          if (userResponse) {\n            if (userResponse.reponseQuestion === 'Oui') {\n              return {\n                oui: 'blue',\n                non: 'white',\n                idk: 'white'\n              };\n            } else if (userResponse.reponseQuestion === 'Non') {\n              return {\n                oui: 'white',\n                non: 'blue',\n                idk: 'white'\n              };\n            } else if (userResponse.reponseQuestion === 'Je ne sais pas') {\n              return {\n                oui: 'white',\n                non: 'white',\n                idk: 'blue'\n              };\n            }\n          } else {\n            return {\n              oui: 'white',\n              non: 'white',\n              idk: 'white'\n            };\n          }\n        });\n        setButtonColors(initialButtonColors);\n        setQuestions(questionsData);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des questions et réponses:', error.message);\n      }\n    });\n    return _fetchQuestions.apply(this, arguments);\n  }\n  function getUserConnecte() {\n    return _getUserConnecte.apply(this, arguments);\n  }\n  function _getUserConnecte() {\n    _getUserConnecte = _asyncToGenerator(function* () {\n      var userActif = yield supabase.auth.getUser();\n      var userId = userActif.data.user.id;\n      return userId;\n    });\n    return _getUserConnecte.apply(this, arguments);\n  }\n  function getIdQuestionnaireUserConnecte(_x) {\n    return _getIdQuestionnaireUserConnecte.apply(this, arguments);\n  }\n  function _getIdQuestionnaireUserConnecte() {\n    _getIdQuestionnaireUserConnecte = _asyncToGenerator(function* (idUser) {\n      try {\n        var _yield$supabase$rpc = yield supabase.rpc('get_id_questionnaire_user_connecte', {\n            iduser: idUser\n          }),\n          data = _yield$supabase$rpc.data,\n          error = _yield$supabase$rpc.error;\n        console.log(data);\n        if (error) {\n          throw new Error('Erreur lors de l\\'appel de la fonction PL/pgSQL: ' + error.message);\n        }\n        if (data.length === 0) {\n          throw new Error('ID du questionnaire non trouvé pour l\\'utilisateur connecté');\n        }\n        return data;\n      } catch (error) {\n        console.error('Erreur:', error.message);\n        return null;\n      }\n    });\n    return _getIdQuestionnaireUserConnecte.apply(this, arguments);\n  }\n  function insertOrUpdateQuestionnaire(_x2, _x3, _x4, _x5, _x6) {\n    return _insertOrUpdateQuestionnaire.apply(this, arguments);\n  }\n  function _insertOrUpdateQuestionnaire() {\n    _insertOrUpdateQuestionnaire = _asyncToGenerator(function* (idQuestionnaire, idQuestion, reponseQuestion, idDetailQuestion, reponseDetailQuestion) {\n      try {\n        var _yield$supabase$rpc2 = yield supabase.rpc('insert_or_update_liaison_questionnaire', {\n            idquestionnaire: idQuestionnaire,\n            idquestion: idQuestion,\n            reponsequestion: reponseQuestion,\n            iddetailquestion: idDetailQuestion,\n            reponsedetailquestion: reponseDetailQuestion\n          }),\n          data = _yield$supabase$rpc2.data,\n          error = _yield$supabase$rpc2.error;\n        if (error) {\n          throw new Error('Erreur lors de l\\'opération: ' + error.message);\n        }\n        Alert.alert('Opération réussie');\n      } catch (error) {\n        console.error('Erreur lors de l\\'opération:', error.message);\n        Alert.alert('Erreur lors de l\\'opération');\n      }\n    });\n    return _insertOrUpdateQuestionnaire.apply(this, arguments);\n  }\n  function handleOptionSelect(_x7, _x8) {\n    return _handleOptionSelect.apply(this, arguments);\n  }\n  function _handleOptionSelect() {\n    _handleOptionSelect = _asyncToGenerator(function* (option, index) {\n      try {\n        var userId = yield getUserConnecte();\n        var idQuestionnaire = yield getIdQuestionnaireUserConnecte(userId);\n        if (idQuestionnaire) {\n          insertOrUpdateQuestionnaire(idQuestionnaire, index, option, null, answer);\n        } else {\n          console.error('ID du questionnaire non trouvé.');\n        }\n        setSelectedOption(option);\n        setSelectedQuestionIndex(index);\n        setButtonColors(function (prevColors) {\n          var updatedColors = _toConsumableArray(prevColors);\n          var selectedQuestionColors = {\n            oui: 'white',\n            non: 'white',\n            idk: 'white'\n          };\n          if (option === 'Oui') {\n            selectedQuestionColors.oui = '#0BADD5';\n          } else if (option === 'Non') {\n            selectedQuestionColors.non = '#0BADD5';\n          } else if (option === 'Je ne sais pas') {\n            selectedQuestionColors.idk = '#0BADD5';\n          }\n          updatedColors[index] = selectedQuestionColors;\n          return updatedColors;\n        });\n        console.log(index);\n        console.log(option);\n      } catch (error) {\n        console.error('Erreur lors de la manipulation des données:', error);\n        Alert.alert('Erreur lors de la manipulation des données');\n      }\n    });\n    return _handleOptionSelect.apply(this, arguments);\n  }\n  return _jsxDEV(ScrollView, {\n    children: questions.map(function (question, index) {\n      return _jsxDEV(View, {\n        children: [_jsxDEV(Text, {\n          children: question.libelleQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, _this), selectedQuestionIndex === index && selectedOption === 'Oui' && question.questionnaire_dons_details_questions.map(function (detail, detailIndex) {\n          return _jsxDEV(View, {\n            children: [_jsxDEV(Text, {\n              children: detail.libelleDetailQuestion\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 29\n            }, _this), _jsxDEV(TextInput, {\n              placeholder: \"R\\xE9ponse\",\n              onChangeText: function onChangeText(text) {\n                return setAnswer(text);\n              },\n              value: answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, _this)]\n          }, detailIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, _this);\n        }), _jsxDEV(View, {\n          style: styles.buttonContainer,\n          children: [_jsxDEV(TouchableOpacity, {\n            style: [styles.buttonOui, {\n              backgroundColor: buttonColors[index].oui\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Oui', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonText,\n              children: \"Oui\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, _this), _jsxDEV(TouchableOpacity, {\n            style: [styles.buttonIDK, {\n              backgroundColor: buttonColors[index].idk\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Je ne sais pas', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonTextIDK,\n              children: \"Je ne sais pas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, _this), _jsxDEV(TouchableOpacity, {\n            style: [styles.buttonNon, {\n              backgroundColor: buttonColors[index].non\n            }],\n            onPress: function onPress() {\n              return handleOptionSelect('Non', index);\n            },\n            children: _jsxDEV(Text, {\n              style: styles.buttonText,\n              children: \"Non\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, _this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n}\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 10\n  },\n  buttonIDK: {\n    padding: 10,\n    borderRadius: 5,\n    width: '40%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonOui: {\n    padding: 10,\n    borderRadius: 5,\n    width: '25%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonNon: {\n    padding: 10,\n    borderRadius: 5,\n    width: '25%',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  buttonText: {\n    color: 'black',\n    textAlign: 'center'\n  },\n  buttonTextIDK: {\n    color: 'black',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","ScrollView","StyleSheet","TouchableOpacity","Alert","supabase","jsxDEV","_jsxDEV","Autres","_this","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","selectedOption","setSelectedOption","_useState5","_useState6","selectedQuestionIndex","setSelectedQuestionIndex","_useState7","_useState8","answer","setAnswer","_useState9","_useState10","buttonColors","setButtonColors","fetchQuestions","_fetchQuestions","apply","arguments","_asyncToGenerator","userId","getUserConnecte","console","error","_yield$supabase$from$","from","select","eq","userResponses","data","responseError","log","message","_yield$supabase$from$2","questionsData","questionsError","initialButtonColors","map","question","userResponse","find","response","idQuestion","reponseQuestion","oui","non","idk","_getUserConnecte","userActif","auth","getUser","user","id","getIdQuestionnaireUserConnecte","_x","_getIdQuestionnaireUserConnecte","idUser","_yield$supabase$rpc","rpc","iduser","Error","length","insertOrUpdateQuestionnaire","_x2","_x3","_x4","_x5","_x6","_insertOrUpdateQuestionnaire","idQuestionnaire","idDetailQuestion","reponseDetailQuestion","_yield$supabase$rpc2","idquestionnaire","idquestion","reponsequestion","iddetailquestion","reponsedetailquestion","alert","handleOptionSelect","_x7","_x8","_handleOptionSelect","option","index","prevColors","updatedColors","_toConsumableArray","selectedQuestionColors","children","libelleQuestion","fileName","_jsxFileName","lineNumber","columnNumber","questionnaire_dons_details_questions","detail","detailIndex","libelleDetailQuestion","placeholder","onChangeText","text","value","style","styles","buttonContainer","buttonOui","backgroundColor","onPress","buttonText","buttonIDK","buttonTextIDK","buttonNon","create","flexDirection","justifyContent","marginTop","padding","borderRadius","width","borderColor","borderWidth","color","textAlign"],"sources":["C:/Users/kenzo/OneDrive/Bureau/ESP/BloodLink/frontEnd/composants/Info/SousInfo/Sante/Autres.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Button, TextInput, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\r\nimport { supabase } from '../../../../lib/supabase';\r\n\r\n\r\n\r\nexport default function Autres() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [selectedQuestionIndex, setSelectedQuestionIndex] = useState(null);\r\n    const [answer, setAnswer] = useState('');\r\n    const [buttonColors, setButtonColors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // async function fetchQuestions() {\r\n    //     try {\r\n    //         const { data, error } = await supabase.from('questionnaire_dons_questions')\r\n    //             .select(`\r\n    //         libelleQuestion, \r\n    //         questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion),\r\n    //         sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)`)\r\n    //             .eq('idSousCategorieQuestion', '5');\r\n    //         if (error) {\r\n    //             console.error('erreur ', error);\r\n    //             return;\r\n    //         }\r\n    //         const initialButtonColors = new Array(data.length).fill({ oui: 'white', non: 'white', idk: 'white' });\r\n    //         setButtonColors(initialButtonColors);\r\n    //         setQuestions(data);\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n    //     }\r\n    // }\r\n    async function fetchQuestions() {\r\n        try {\r\n            const userId = getUserConnecte();\r\n            if (!userId) {\r\n                console.error('Utilisateur non identifié.');\r\n                return;\r\n            }\r\n    \r\n            const { data: userResponses, error: responseError } = await supabase\r\n                .from('liaison_questionnaire')\r\n                .select('idQuestion, reponseQuestion')\r\n                .eq('idQuestionnaire', userId); // Récupérer les réponses de l'utilisateur\r\n            console.log(userResponses);\r\n            \r\n            if (responseError) {\r\n                console.error('Erreur lors de la récupération des réponses:', responseError.message);\r\n                return;\r\n            }\r\n    \r\n            const { data: questionsData, error: questionsError } = await supabase\r\n                .from('questionnaire_dons_questions')\r\n                .select('idQuestion, libelleQuestion, questionnaire_dons_details_questions(idQuestion, libelleDetailQuestion), sous_categorie_question(idSousCategorieQuestion, libelleSousCategorieQuestion, idCategorieQuestion)')\r\n                .eq('idSousCategorieQuestion', '5');\r\n    \r\n            if (questionsError) {\r\n                console.error('Erreur lors de la récupération des questions:', questionsError.message);\r\n                return;\r\n            }\r\n    \r\n            const initialButtonColors = questionsData.map(question => {\r\n                const userResponse = userResponses.find(response => response.idQuestion === question.idQuestion);\r\n                if (userResponse) {\r\n                    // Vérifier si la réponse de l'utilisateur à la question est \"Oui\"\r\n                    if (userResponse.reponseQuestion === 'Oui') {\r\n                        // Si la réponse est \"Oui\", définir la couleur du bouton \"Oui\" sur bleu\r\n                        return { oui: 'blue', non: 'white', idk: 'white' };\r\n                    } else if (userResponse.reponseQuestion === 'Non') {\r\n                        // Si la réponse est \"Non\", définir la couleur du bouton \"Non\" sur bleu\r\n                        return { oui: 'white', non: 'blue', idk: 'white' };\r\n                    } else if (userResponse.reponseQuestion === 'Je ne sais pas') {\r\n                        // Si la réponse est \"je ne sais pas\", définir la couleur du bouton \"je ne sais pas\" sur bleu\r\n                        return { oui: 'white', non: 'white', idk: 'blue' };\r\n                    }\r\n                } else {\r\n                    // Si l'utilisateur n'a pas encore répondu à cette question, définir la couleur par défaut\r\n                    return { oui: 'white', non: 'white', idk: 'white' };\r\n                }\r\n            });\r\n    \r\n            setButtonColors(initialButtonColors);\r\n            setQuestions(questionsData);\r\n        } catch (error) {\r\n            console.error('Erreur lors de la récupération des questions et réponses:', error.message);\r\n        }\r\n    }\r\n    \r\n    async function getUserConnecte() {\r\n        const userActif = await supabase.auth.getUser();\r\n        const userId = userActif.data.user.id;        \r\n        return userId;\r\n    }\r\n   \r\n    async function getIdQuestionnaireUserConnecte(idUser) {\r\n        try {\r\n            const { data, error } = await supabase.rpc('get_id_questionnaire_user_connecte', { iduser: idUser });\r\n            console.log(data);\r\n\r\n            if (error) {\r\n                throw new Error('Erreur lors de l\\'appel de la fonction PL/pgSQL: ' + error.message);\r\n            }\r\n\r\n            if (data.length === 0) {\r\n                throw new Error('ID du questionnaire non trouvé pour l\\'utilisateur connecté');\r\n            }\r\n            \r\n            return data;\r\n        } catch (error) {\r\n            console.error('Erreur:', error.message);\r\n            return null;\r\n        }\r\n    }\r\n    async function insertOrUpdateQuestionnaire(idQuestionnaire, idQuestion, reponseQuestion, idDetailQuestion, reponseDetailQuestion) {\r\n        try {\r\n            const { data, error } = await supabase.rpc('insert_or_update_liaison_questionnaire', {\r\n                idquestionnaire: idQuestionnaire,\r\n                idquestion: idQuestion,\r\n                reponsequestion: reponseQuestion,\r\n                iddetailquestion: idDetailQuestion,\r\n                reponsedetailquestion: reponseDetailQuestion\r\n            });\r\n    \r\n            if (error) {\r\n                throw new Error('Erreur lors de l\\'opération: ' + error.message);\r\n            }\r\n    \r\n            Alert.alert('Opération réussie');\r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'opération:', error.message);\r\n            Alert.alert('Erreur lors de l\\'opération');\r\n        }\r\n    }\r\n    \r\n    async function handleOptionSelect(option, index,) {\r\n        try {\r\n            const userId = await getUserConnecte();\r\n            const idQuestionnaire = await getIdQuestionnaireUserConnecte(userId);\r\n    \r\n            if (idQuestionnaire) {\r\n                insertOrUpdateQuestionnaire(idQuestionnaire, index, option, null, answer);\r\n            } else {\r\n                console.error('ID du questionnaire non trouvé.');\r\n            }\r\n    \r\n            setSelectedOption(option);\r\n            setSelectedQuestionIndex(index);\r\n            setButtonColors(prevColors => {\r\n                const updatedColors = [...prevColors];\r\n                const selectedQuestionColors = { oui: 'white', non: 'white', idk: 'white' };\r\n                if (option === 'Oui') {\r\n                    selectedQuestionColors.oui = '#0BADD5';\r\n                } else if (option === 'Non') {\r\n                    selectedQuestionColors.non = '#0BADD5';\r\n                } else if (option === 'Je ne sais pas') {\r\n                    selectedQuestionColors.idk = '#0BADD5';\r\n                }\r\n    \r\n                updatedColors[index] = selectedQuestionColors;\r\n                return updatedColors;\r\n            });\r\n            \r\n            console.log(index);\r\n            console.log(option);\r\n            \r\n            \r\n        } catch (error) {\r\n            console.error('Erreur lors de la manipulation des données:', error);\r\n            Alert.alert('Erreur lors de la manipulation des données');\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <ScrollView>\r\n            {questions.map((question, index) => (\r\n                <View key={index}>\r\n                    <Text>{question.libelleQuestion}</Text>\r\n                    {selectedQuestionIndex === index && selectedOption === 'Oui' && question.questionnaire_dons_details_questions.map((detail, detailIndex) => (\r\n                        <View key={detailIndex}>\r\n                            <Text>{detail.libelleDetailQuestion}</Text>\r\n                            <TextInput\r\n                                placeholder=\"Réponse\"\r\n                                onChangeText={(text) => setAnswer(text)}\r\n                                value={answer}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                    <View style={styles.buttonContainer}>\r\n                        <TouchableOpacity style={[styles.buttonOui, { backgroundColor: buttonColors[index].oui }]} onPress={() => handleOptionSelect('Oui', index)}>\r\n                            <Text style={styles.buttonText}>Oui</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={[styles.buttonIDK, { backgroundColor: buttonColors[index].idk }]} onPress={() => handleOptionSelect('Je ne sais pas', index)}>\r\n                            <Text style={styles.buttonTextIDK}>Je ne sais pas</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity style={[styles.buttonNon, { backgroundColor: buttonColors[index].non }]} onPress={() => handleOptionSelect('Non', index)}>\r\n                            <Text style={styles.buttonText}>Non</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            ))}\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        marginTop: 10,\r\n    },\r\n    buttonIDK: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '40%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonOui: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '25%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonNon: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n        width: '25%',\r\n        borderColor: 'black',\r\n        borderWidth: 1\r\n    },\r\n    buttonText: {\r\n        color: 'black',\r\n        textAlign: 'center',\r\n\r\n    },\r\n    buttonTextIDK: {\r\n        color: 'black',\r\n        textAlign: 'center',\r\n\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}